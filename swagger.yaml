swagger: "2.0"
info:
  description: "This is a sample Twitter server API documentation."
  version: "1.0.0"
  title: "Swagger Twitter"
host: "twitter.swagger.io"
basePath: "/v1"
tags:
- name: "user"
  description: "APIs related to user"
- name: "tweet"
  description: "APIs related to tweet"
- name: "list"
  description: "APIs related to list"
- name: "message"
  description: "APIs related to message"
schemes:
- "https"
- "http"
securityDefinitions:
  Bearer:
    description: Example value:- Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU5MmQwMGJhNTJjYjJjM
    type: apiKey
    name: Authorization
    in: header
paths:
  "/signup":
    post:
      tags:
      - user
      summary: Create user
      description: Create user API
      operationId: signup
      produces:
      - application/json
      parameters:
      - name: User details
        in: body
        required: true
        description: 'User details'
        schema:
          $ref: "#/definitions/Signup"
      responses:
        '200':
          description: User successfully created
        '400': 
          description: Bad request
        '409': 
          description: User already exists
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  "/login":
    post:
      tags:
      - user
      summary: Authenticate user
      description: Authenticate user API
      operationId: login
      produces:
      - application/json
      parameters:
      - in: body
        name: user
        description: User's crecredentials
        required: true
        schema:
          type: object
          required:
          - username
          - password
          properties:
            username:
              type: string
            password:
              type: string
              format: password
      responses:
        '200':
          description: Auth successful
          schema:
            type: object
            properties:
              user:
                type: object
              token:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  "/user/{id}":
    get:
      tags:
      - user
      security:
      - Bearer: []
      summary: Get user profile
      description: Get User Profile Details
      operationId: getUserProfile
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: 'User id'
      responses:
        '200':
          description: Ok
          schema:
            $ref: "#/definitions/Profile"
        '400':
          description: Bad request
        '401': 
          description: Unauthorized
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal Server Error
    put:
      tags:
      - user
      security:
      - Bearer: []
      summary: Update user profile
      description: Update User Profile Details
      operationId: updateUserProfile
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: 'User id'
      - name: User details
        in: body
        required: true
        description: 'User details'
        schema:
          $ref: "#/definitions/Profile"
      responses:
        '201':
          description: Created Successfully
        '401': 
          description: Unauthorized
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal Server Error
    delete:
      tags:
      - user
      security:
      - Bearer: []
      summary: Delete user account
      description: Delete User Account & Its Related Details
      operationId: deleteUserAccount
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: 'User id'
      responses:
        '200':
          description: Ok
        '401': 
          description: Unauthorized
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal Server Error
  /user/deactivateAccount :
    put:
      tags:
      - user
      security:
      - Bearer: []
      summary: Deactivate user account
      description: Deactivate User Account
      operationId: deactivateUserAccount
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: 'User id'
      responses:
        '200':
          description: Ok
        '401': 
          description: Unauthorized
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal Server Error
  /tweet/topTweets/{date} :
    get :
      tags :
      - "tweet"
      security:
      - Bearer: []
      summary : "Get top tweets on a day"
      description : "This is for displaying top 10 tweets of the day"
      operationId : "getTopTweets"
      produces : 
      - "application/json"
      parameters : 
      - name : "date"
        in : "path"
        description : "date that you want top tweets for"
        required : true
        type : "string"
      responses :
        200 :
          description : "Successful operation"
        422 :
          description : "Invalid date supplied"
  /user/followers/{userId} :
    get :
      tags :
      - "user"
      security:
      - Bearer: []
      summary : "Get follower of an user"
      description : "This gets the userid of the folowers for given userid"
      operationId : "getFollowers"
      produces : 
      - "application/json"
      parameters :
      - name : "userId"
        in : "path"
        description : "userid you want followers of"
        required : true
        type : "string"
      responses :
        200 :
          description : "Successful operation"
        404 :
          description : "Userid not found"
  /user/following/{userId} :
    get :
      tags :
      - "user"
      security:
      - Bearer: []
      summary : "Get following list  of an user"
      description : "This gets the userid of the accounts the userid is following"
      operationId : "getFollowing"
      produces : 
      - "application/json"
      parameters :
      - name : "userId"
        in : "path"
        description : "userid you want to get the following list of"
        required : true
        type : "string"
      responses :
        200 :
          description : "Successful operation"
        404 :
          description : "Userid not found"
  /user/follow :
    post :
      tags :
      - "user"
      security:
      - Bearer: []
      summary : "Add a user to your following list"
      description : "You will follow this user and get his tweets"
      operationId : "followUser"
      produces : 
      - "application/json"
      parameters :
      - name : "body"
        in : "body"
        description : "userid of user and the one you want to follow"
        required : true
        schema:
          $ref: "#/definitions/Follow"
      responses :
        200 :
          description : "Successful operation"
        404 :
          description : "Userid not found"
  /user/unfollow :
    post :
      tags :
      - "user"
      security:
      - Bearer: []
      summary : "Remove a user to your following list"
      description : "You will un-follow this user and get his tweets"
      operationId : "unFollowUser"
      produces : 
      - "application/json"
      parameters :
      - name : "body"
        in : "body"
        description : "userid of user and the one you want to un-follow"
        required : true
        schema:
          $ref: "#/definitions/Follow"
      responses :
        200 :
          description : "Successful operation"
        404 :
          description : "Userid not found"
  /fetchTweetByID/{TweetID} :
    get:
      tags:
      - "Search"
      security:
      - Bearer: []
      summary: "Fetch tweet using tweet ID"
      description: "Tweet ID is supplied and the tweet is returned"
      operationId: "fetchTweetByID"
      produces:
      - "application/json"
      parameters:
      - name: "TweetID"
        in: "path"
        description: "Id of the tweet to be fetched"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
  /fetchTweetByUserID/{UserID}:
    get:
      tags:
      - "Search"
      summary: "Fetch tweets based on UserID we can use this approach to implement fetching scenarios likeUser feed, subscriber feed, my tweets, my retweets, liked tweets and  bookmarked tweets"
      description: "To get all the tweets that were tweeted out by the user bearing the given UserID"
      operationId: "fetchTweetsByUserID"
      produces:
      - "application/json"
      parameters:
      - name: "UserID"
        in: "path"
        description: "UserID to filter tweets by"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid tag value"
  /fetchTopicsByHashtag/{hashtag}:
    get:
      tags:
      - "Search"
      security:
      - Bearer: []
      summary: "Fetch tweets/topics based on Hashtags"
      description: "To get all the tweets that contain the usgae of the searched hashtag"
      operationId: "fetchTopicsByHashtag"
      produces:
      - "application/json"
      parameters:
      - name: "hashtag"
        in: "path"
        description: "Search and fetch tweets using this hashtag"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid tag value"
  /fetchProfile/{UserID}:
    get:
      tags:
      - "Search"
      security:
      - Bearer: []
      summary: "Fetch User Profile based on UserID"
      description: "To get the Profile details of the user bearing the given UserID"
      operationId: "fetchProfile"
      produces:
      - "application/json"
      parameters:
      - name: "UserID"
        in: "path"
        description: "UserID to fetch profile by"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid tag value"
  /user/list:
    post:
      tags:
      - "list"
      security:
      - Bearer: []
      summary: "Create a new list with users who belong to the list"
      description: ""
      operationId: "createList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Name of the list along with owner ID and user IDs of users who belong to the list"
        required: true
        schema:
          $ref: "#/definitions/CreateList"
      responses:
        '200':
          description : "List created successfully. Response will contain all the lists owned by the user who created the list."
          schema:
            type: "object"
            properties:
              AllListsOwnedByUser:
                type: "array"
                items:
                  $ref: "#/definitions/ListDetails"
        '400': 
          description: "Invalid ownerID or userID provided in membersID array"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/list/all:
    get:
      tags:
      - "list"
      security:
      - Bearer: []
      summary: "Fetch all lists which are not created by requesting user"
      description: ""
      operationId: "fetchList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        '400':
          description: "Invalid user ID"
        '200':
          description : "All lists where the owner is not requesting user"
          schema:
            type: "object"
            properties:
              AllListsNotOwnedByUser:
                type: "array"
                items:
                  $ref: "#/definitions/ListDetails"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/list/owned:
    get:
      tags:
      - "list"
      security:
      - Bearer: []
      summary: "Fetch all lists which are created by a user"
      description: ""
      operationId: "fetchUserOwnedLists"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        '400':
          description: "Invalid user ID"
        '200':
          description : "All lists where the owner is requesting user"
          schema:
            type: "object"
            properties:
              AllListsOwnedByUser:
                type: "array"
                items:
                  $ref: "#/definitions/ListDetails"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/list/subscribed:
    get:
      tags:
      - "list"
      security:
      - Bearer: []
      summary: "Fetch all lists which are subscribed by a user"
      description: ""
      operationId: "fetchUserSubscribedLists"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        '400':
          description: "Invalid user ID"
        '200':
          description : "All lists which are subscribed by a requesting user"
          schema:
            type: "object"
            properties:
              AllListsSubscribedByUser:
                type: "array"
                items:
                  $ref: "#/definitions/ListDetails"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/list/subscribe:
    post:
      tags:
      - "list"
      security:
      - Bearer: []
      summary: "User subscribes to a list"
      description: "User will subscribe to a list created by others. List corresponding to the list ID will be duplicated with owner as the subscriber"
      operationId: "subscribeToList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/SubscribeToList"
      responses:
        '200':
          description: "successful operation"
        '400':
          description: "Invalid list ID or user(subscriber) ID"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/message/send:
    post:
      tags:
      - "message"
      security:
      - Bearer: []
      summary: "User sends a message to another user"
      description: "User 1 sends message to user 2"
      operationId: "sendMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/SendMessage"
      responses:
        '200':
          description: "message sent successfully"
        '400':
          description: "Invalid from fromUserID or toUserID"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/message/inbox:
    get:
      tags:
      - "message"
      security:
      - Bearer: []
      summary: "Fetch people in inbox for a user"
      description: "Returns list of users who are present in inbox of requesting user"
      operationId: "getUsersInInbox"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserInbox"
        '400':
          description: "Invalid userID"
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /user/message/conversation:
    get:
      tags:
      - "message"
      security:
      - Bearer: []
      summary: "get messages belonging to a particular conversation"
      description: ""
      operationId: "fetchConverstationMessages"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/ConversationUsers"
      responses:
        '200':
          description: "All messages belonging to a conversation"
          schema:
            $ref: "#/definitions/ConversationMessages"
        '400':
          description: "Invalid userID"
        '409': 
          description: User already exists
        '422':
          description: Unprocessable Entity
        '500':
          description: Internal server error
  /createTweet:
    post:
      tags:
      - tweet
      security:
      - Bearer: []
      summary: Create a new tweet which has text and/or images. Also create a retweet
        of already created tweet
      operationId: addPet
      responses:
        200:
          description: Tweet/Retweet created
        401:
          description: Invalid input
        404:
          description: Database not found
        501:
          description: Server not responding
  /bookmarkTweet:
    post:
      tags:
      - tweet
      security:
      - Bearer: []
      summary: Add tweet to bookmark list of the user
      description: Take UserId and TweetId and store it in bookmark table such that
        tweet is added to user's bookmarks.
      operationId: bookmarkTweet
      parameters:
      - name: tweetid
        in: query
        description: TweetID of the tweet that needs to be bookmarked
        required: true
        type: "string"
        format: "ObjectId"
      - name: userid
        in: query
        description: UserID/Username of the user that bookmarked the tweet
        required: true
        type: "string"
        format: "ObjectId"
      responses:
        200:
          description: Bookmark Successful
        401:
          description: Invalid TweetId value
        404:
          description: Bookmark not successful due to unavailable resources
  /likeTweet:
    post:
      tags:
      - tweet
      security:
      - Bearer: []
      summary: Users can like a tweet posted by another user.
      description: When user likes a tweet, store tweetid and userid in like table
        and increase the count of likes for the tweet.
      operationId: likeTweet
      parameters:
      - name: tweetid
        in: query
        description: TweetID of the tweet that needs to be bookmarked
        required: true
        type: "string"
        format: "ObjectId"
      - name: userid
        in: query
        description: UserID/Username of the user that bookmarked the tweet
        required: true
        type: "string"
        format: "ObjectId"
      responses:
        200:
          description: Like Tweet Successful
        401:
          description: Invalid TweetId/UserId value
        404:
          description: Like Tweet not successful due to unavailable resources
  /addComment:
    post:
      tags:
      - tweet
      security:
      - Bearer: []
      summary: Add comment to a tweet
      description: Adds a comment to TweetId along with current time.
      operationId: addComment
      parameters:
      - name: TweetId
        in: query
        description: TweetId of the tweet on which comment is made.
        required: true
        type: "string"
        format: "ObjectId"
      - name: UserId
        in: query
        description: UserId of the user who adds a comment
        required: true
        type: "string"
        format: "ObjectId"
      - name: comment
        in: query
        description: Comment of the user who adds a comment
        required: true
        type: "string"
        format: "ObjectId"
      responses:
        200:
          description: Like Tweet Successful
        401:
          description: Invalid TweetId/UserId value
        404:
          description: Add comment not successful due to unavailable resources
  /deleteTweet:
    delete:
      tags:
      - tweet
      security:
      - Bearer: []
      summary: Delete a tweet
      operationId: deleteTweet
      parameters:
      - name: TweetId
        in: query
        description: TweetId of the tweet which should be deleted
        required: true
        type: "string"
        format: "ObjectId"
      - name: UserId
        in: query
        description: UserId of the user who deletes the tweet
        required: true
        type: "string"
        format: "ObjectId"
      responses:
        200:
          description: Delete Tweet Successful
        401:
          description: Invalid TweetId/UserId value
        404:
          description: Delete comment not successful due to unavailable resources
definitions:
  Follow :
    type : "object"
    properties : 
      userid :
        type : "string"
      useridToFollow :
        type : "string"
  User:
    type: "object"
    properties:
      userID:
        type: "string"
        format: "ObjectId"
  ListDetails:
    type: "object"
    properties:
      listID:
        type: "string"
        format: "ObjectId"
      listName:
        type: "string"
      ownerID:
        type: "string"
        format: "ObjectId"
      noOfMembers:
        type: "integer"
      membersID:
        type: "array"
        items:
          type: "string"
          format: "ObjectId"
          description: "Array of userIDs"
        uniqueItems: true
      noOfSubsribers:
        type: "integer"
  CreateList:
    type: "object"
    properties:
      ownerID:
        type: "string"
        format: "ObjectId"
      listName:
        type: "string"
      membersID:
        type: "array"
        items: 
          type: "string"
          format: "ObjectId"
          description: "Array of userIDs"
        uniqueItems: true
  SubscribeToList:
    type: "object"
    properties:
      listID:
        type: "string"
      userID:
        type: "string"
  SendMessage:
    type: "object"
    properties:
      fromUserID:
        type: "string"
        format: "ObjectId"
      toUserID:
        type: "string"
        format: "ObjectId"
      message:
        type: "string"
      time:
        type: "string"
        format: "date-time"
  UserInbox:
    type: "object"
    properties:
      userDetails:
        type: "array"
        items:
          type: "object"
          properties:
            userID: 
              type: "string"
              format: "ObjectId"
            userName: 
              type: "string"
  ConversationUsers:
    type: "object"
    properties:
      fromUserID:
        type: "string"
        format: "ObjectId"
      toUserID:
        type: "string"
        format: "ObjectId"
  ConversationMessages:
    type: "object"
    properties:
      messages:
        type: "array"
        items: 
          type: "object"
          properties:
            senderUserID:
              type: "string"
              format: "ObjectId"
            text:
              type: "string"
            time:
              type: "string"
              format: "date-time"
  Signup:
    type: "object"
    properties:
      username:
        type: "string"
      userId:
        type: "string"
      email:
        type: "string"
      contactNumber:
        type: "number"
      password:
        type: "string"
      confirmPassword:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      zipcode:
        type: "string"
      description:
        type: "string"
      profileImage:
        type: "string"
  Profile:
    type: "object"
    properties:
      username:
        type: "string"
      userId:
        type: "string"
      email:
        type: "string"
      contactNumber:
        type: "number"
      password:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      zipcode:
        type: "string"
      description:
        type: "string"
      profileImage:
        type: "string"